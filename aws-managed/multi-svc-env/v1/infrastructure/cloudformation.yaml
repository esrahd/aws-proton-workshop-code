AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  Simple Lambda based HTTP service template
  Service mesh, monitoring and alerting capabilities through App Mesh and AMP

Resources:

  # App Mesh Resources
  ServiceMesh:
    Type: AWS::AppMesh::Mesh

  # This is a role to allows ECS container agent makes calls to 
  # the Amazon ECS API on your behalf.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
            - ecs-tasks.amazonaws.com
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'  
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess'

  # Prometheus Resources
  PrometheusWorkspace:
    Type: AWS::APS::Workspace
  
  OtelConfigParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: otel-collector-config
      Type: String
      DataType: text
      Tier: Advanced
      Value: !Sub |
        receivers:  
          prometheus:
            config:
              global:
                scrape_interval: 1m
                scrape_timeout: 10s
              scrape_configs:
              - job_name: "appmesh-envoy"
                sample_limit: 10000
                metrics_path: /stats/prometheus
                static_configs:
                  - targets: ['0.0.0.0:9901']
          awsecscontainermetrics:
            collection_interval: 15s
          otlp:
            protocols:
              grpc:
                endpoint: 0.0.0.0:4317
              http:
                endpoint: 0.0.0.0:55681
          awsxray:
            endpoint: 0.0.0.0:2000
            transport: udp
          statsd:
            endpoint: 0.0.0.0:8125
            aggregation_interval: 60s
        processors:
          batch/traces:
            timeout: 1s
            send_batch_size: 50
          batch/metrics:
            timeout: 60s
          filter:
            metrics:
              include:
                match_type: strict
                metric_names:
                  - ecs.task.memory.utilized
                  - ecs.task.memory.reserved
                  - ecs.task.memory.usage
                  - ecs.task.cpu.utilized
                  - ecs.task.cpu.reserved
                  - ecs.task.cpu.usage.vcpu
                  - ecs.task.network.rate.rx
                  - ecs.task.network.rate.tx
                  - ecs.task.storage.read_bytes
                  - ecs.task.storage.write_bytes
        exporters:
          awsxray:
          awsprometheusremotewrite:
            endpoint: ${PrometheusWorkspace.PrometheusEndpoint}api/v1/remote_write
            aws_auth:
              region: ${AWS::Region}
              service: "aps"
            resource_to_telemetry_conversion:
              enabled: true
          awsemf:
            namespace: ECS/AWSOtel/Application
            log_group_name: '/ecs/application/metrics/{ClusterName}'
            log_stream_name: '/{TaskDefinitionFamily}/{TaskId}'
            resource_to_telemetry_conversion:
              enabled: true
            dimension_rollup_option: NoDimensionRollup
            metric_declarations:
              - dimensions: [ [ ClusterName, TaskDefinitionFamily ] ]
                metric_name_selectors:
                  - "^envoy_http_downstream_rq_(total|xx)$"
                  - "^envoy_cluster_upstream_cx_(r|t)x_bytes_total$"
                  - "^envoy_cluster_membership_(healthy|total)$"
                  - "^envoy_server_memory_(allocated|heap_size)$"
                  - "^envoy_cluster_upstream_cx_(connect_timeout|destroy_local_with_active_rq)$"
                  - "^envoy_cluster_upstream_rq_(pending_failure_eject|pending_overflow|timeout|per_try_timeout|rx_reset|maintenance_mode)$"
                  - "^envoy_http_downstream_cx_destroy_remote_active_rq$"
                  - "^envoy_cluster_upstream_flow_control_(paused_reading_total|resumed_reading_total|backed_up_total|drained_total)$"
                  - "^envoy_cluster_upstream_rq_retry$"
                  - "^envoy_cluster_upstream_rq_retry_(success|overflow)$"
                  - "^envoy_server_(version|uptime|live)$"
                label_matchers:
                  - label_names:
                      - container_name
                    regex: ^envoy$
              - dimensions: [ [ ClusterName, TaskDefinitionFamily, envoy_http_conn_manager_prefix, envoy_response_code_class ] ]
                metric_name_selectors:
                  - "^envoy_http_downstream_rq_xx$"
                label_matchers:
                  - label_names:
                      - container_name
                    regex: ^envoy$
          logging:
            loglevel: debug
        extensions:
          health_check:
          pprof:
            endpoint: :1888
          zpages:
            endpoint: :55679
        service:
          extensions: [pprof, zpages, health_check]
          pipelines:
            metrics:
              receivers: [otlp, statsd]
              processors: [batch/metrics]
              exporters: [logging, awsprometheusremotewrite, awsemf]
            metrics/envoy:
              receivers: [prometheus]
              processors: [batch/metrics]
              exporters: [logging, awsprometheusremotewrite, awsemf]
            metrics/ecs:
              receivers: [awsecscontainermetrics]
              processors: [filter, batch/metrics]
              exporters: [logging, awsprometheusremotewrite, awsemf]
            traces:
              receivers: [otlp, awsxray]
              processors: [batch/traces]
              exporters: [awsxray]

      Description: SSM Parameter for the Opentelemetry agent config

  # This is a role to allow ECS task to call AWS services on your behalf.
  ECSTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ['ecs-tasks.amazonaws.com']
          Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: AWSOpenTelemetryPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogStreams'
                  - 'logs:DescribeLogGroups'
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                  - 'xray:GetSamplingRules'
                  - 'xray:GetSamplingTargets'
                  - 'xray:GetSamplingStatisticSummaries'
                  - 'appmesh:StreamAggregatedResources'
                  - 'ssm:GetParameters'
                  - 'aps:RemoteWrite'
                Resource: '*'

Outputs:
  MeshARN:
    Description: The mesh ARN
    Value: !Ref 'ServiceMesh'
  MeshName:
    Description: The mesh Name
    Value: !GetAtt ['ServiceMesh', 'MeshName']
  ECSTaskRole:
    Description: The ARN of the ECS task role
    Value: !GetAtt 'ECSTaskRole.Arn'
  PrometheusEndpoint:
    Description: The Prometheus endpoint attribute of the workspace.
    Value: !GetAtt 'PrometheusWorkspace.PrometheusEndpoint'
  OtelConfigName:
    Description: The name of the SSM Parameter holding the Opentelemetry Config.
    Value: !Ref 'OtelConfigParameter'
